name: Build and Scan with Veracode

# This workflow will checkout the code, ZIP the Python file, and create an artifact for use in following workflows.
on:
  # Enables manual runs
  workflow_dispatch:
  # Runs "Every day at 4:05" (see https://crontab.guru)
  schedule:
  - cron: "5 4 * * *"

jobs:
  Checkout-Artifact-Scan:
    runs-on: [ubuntu-latest]
    steps:

# Checkout
      - uses: actions/checkout@v2

# In the case of Python we simply ZIP the files into an artifact
      - name: Create application artifact
        run: |
         zip petstore-api-python.zip api.py requirements.txt

# Handy during testing to check the file you expect is actually there 
      - name: Confirm artifact exists on drive
        run: |
         ls -la

      - name: Download Veracode Wrapper
        run: curl -O https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/22.5.10.0/vosp-api-wrappers-java-22.5.10.0.jar

# Use the UploadAndScan action to submit the artifact for scanning for Policy      
      - name: Submit Policy scan
        env: 
          vid: ${{ secrets.VERACODE_API_ID }}
          vkey: ${{ secrets.VERACODE_API_KEY }}
        run: >
         java -jar vosp-api-wrappers-java-22.5.10.0.jar 
         -vid $vid
         -vkey $vkey 
         -appname PetStoreAPI-Github
         -action UploadAndScan
         -createprofile true
         -criticality Medium
         -version ${{ github.run_id }}
         -teams ClintPollock-DemoApps2023 
         -filepath petstore-api-python.zip
        continue-on-error: true

# Use the UploadAndScan action to submit the artifact for scanning for Sandbox     
      - name: Submit Sandbox scan
        env: 
          vid: ${{ secrets.VERACODE_API_ID }}
          vkey: ${{ secrets.VERACODE_API_KEY }}
        run: >
         java -jar vosp-api-wrappers-java-22.5.10.0.jar 
         -vid $vid
         -vkey $vkey 
         -appname PetStoreAPI-Github
         -action UploadAndScan
         -createprofile false
         -createsandbox true
         -sandboxname DailyBuild
         -criticality Medium
         -version ${{ github.run_id }}
         -teams ClintPollock-DemoApps2023 
         -filepath petstore-api-python.zip
        continue-on-error: true

# Use SCA Agent to scan repo and container
  SCA-Agent-Scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: SCA Agent Repo Scan
        env: 
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
        run: curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan
                
      - name: SCA Agent Container Scan
        env: 
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
        run: curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan --image veracodedemolabs/petstore_api_python_github:latest
 
 # Workflow to run DAST Scan against QA server.  We use the veracode/api-signing image for this.
  Submit-DAST-Scan:
    runs-on: ubuntu-latest
    steps:            
# Checkout
      - uses: actions/checkout@v2
      
# Update the DAST Scan Name to be unique using SED command         
      - name: Update DAST config file with unique scan name
        run: |
         NOW=$(date +"%m-%d-%Y-%T")
         sed -i 's/Petstore_API_Python_Github/Petstore_API_Python_Github-'${NOW}'/g' vc-dast-config.json
         sed -i 's/petstore-api-python-github.qa/servicenow-petstore-api-python-github.qa/g' vc-dast-config.json

# Visual confirmation of the scan submission details
      - name: Display DAST config file with unique scan name
        run: |
          cat vc-dast-config.json
           
# DAST scan submission using the DAST API 
      - name: Submit Veracode DAST Scan
        run: |
         pip install veracode-api-signing
         export VERACODE_API_KEY_ID=${{ secrets.VERACODE_API_ID }}
         export VERACODE_API_KEY_SECRET=${{ secrets.VERACODE_API_KEY }}
         http --verbose --auth-type=veracode_hmac GET "https://api.veracode.com/was/configservice/v1/api_specifications"
         http --verbose --auth-type=veracode_hmac POST "https://api.veracode.com/was/configservice/v1/analyses?job_options=run_verification=false&scan_type=API_SCAN" < vc-dast-config.json
#--------------------------------------------------------------------------
# Use Veracode CLI to inspect app and container
  Container-Inspection-SBOM:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Veracode CLI
        run: |
          mkdir tmp
          cd tmp
          curl -fsS https://tools.veracode.com/veracode-cli/install | sh
          export VERACODE_API_KEY_ID=${{ secrets.VERACODE_API_ID }}
          export VERACODE_API_KEY_SECRET=${{ secrets.VERACODE_API_KEY }}
          ./veracode scan --source ./ --type directory --format table -o IssuesSource.txt
          ./veracode sbom --source veracodedemolabs/petstore_api_python_github:latest --type image --format table -o SBOM.txt
          ls -la
    # Store security artifacts
      - name: Upload security artifacts
        uses: actions/upload-artifact@v3.1.0
        with:
          name: SecurityArtifacts
          path: ./tmp/*.txt
